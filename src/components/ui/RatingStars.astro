---
export interface Props {
  rating: number;
  maxRating?: number;
  size?: 'sm' | 'md' | 'lg';
  showNumber?: boolean;
  className?: string;
}

const {
  rating,
  maxRating = 5,
  size = 'md',
  showNumber = false,
  className = ''
} = Astro.props;

// Calculate full stars, half stars, and empty stars
const fullStars = Math.floor(rating);
const hasHalfStar = rating % 1 >= 0.5;
const emptyStars = maxRating - fullStars - (hasHalfStar ? 1 : 0);

const sizeClasses = {
  sm: 'text-sm',
  md: 'text-base',
  lg: 'text-xl'
};
---

<div class={`inline-flex items-center gap-1 ${className}`}>
  <div class={`flex ${sizeClasses[size]}`} role="img" aria-label={`Rating: ${rating} out of ${maxRating} stars`}>
    {Array.from({ length: fullStars }).map(() => (
      <svg class="w-5 h-5 fill-current text-accent-gold" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/>
      </svg>
    ))}

    {hasHalfStar && (
      <svg class="w-5 h-5 fill-current text-accent-gold" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id={`half-${rating}`}>
            <stop offset="50%" stop-color="currentColor"/>
            <stop offset="50%" stop-color="#e5e7eb"/>
          </linearGradient>
        </defs>
        <path fill={`url(#half-${rating})`} d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/>
      </svg>
    )}

    {Array.from({ length: emptyStars }).map(() => (
      <svg class="w-5 h-5 fill-current text-gray-300" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/>
      </svg>
    ))}
  </div>

  {showNumber && (
    <span class="text-gray-700 font-medium">
      {rating}/{maxRating}
    </span>
  )}
</div>
